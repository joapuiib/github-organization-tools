{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GitHub Organization Tools","text":"<p>GitHub Organization Tools (<code>ghot</code>) is a CLI tool designed to simplify the management of users and repositories within a GitHub organization.</p> <p>Features:</p> <ul> <li>Invite and remove users from your organization.</li> <li>Create, clone, pull or delete repositories.</li> <li>Create issues to multiple repositories.</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>This tool can be installed via <code>pip</code>:</p> <pre><code>pip install ghot\n</code></pre>"},{"location":"#quick-start-example","title":"Quick Start Example","text":"<ul> <li> <p>Create a new  organization in  GitHub.</p> </li> <li> <p>Define a CSV file with the users and repositories.     <pre><code>id,username,repo\nid1,user1,org/user1-repo\nid2,user2,org/user2-repo\n</code></pre></p> <ul> <li><code>id</code> is a custom identifier for the user.</li> <li><code>username</code> is the GitHub username.</li> <li><code>repo</code> is the repository name in the organization.</li> </ul> <p>Check the CSV Format for more details.</p> </li> <li> <p>Invite users to the organization:     <pre><code>ghot user invite my-org users.csv\n</code></pre></p> </li> <li> <p>Let users accept the invitation and create their repositories \u2014 Or do it for them!     <pre><code>ghot repo create my-org users.csv\nghot repo invite my-org users.csv\n</code></pre></p> </li> <li> <p>And clone the repositories!     <pre><code>ghot repo clone my-org users.csv\n</code></pre></p> </li> </ul>"},{"location":"reference/","title":"Reference","text":"<p>This section includes the reference for the <code>ghot</code> commands and options.</p>"},{"location":"reference/#command-reference","title":"Command reference","text":"<ul> <li>Authentication</li> <li>Configuration</li> <li>Managing Users</li> <li>Repository Operations</li> </ul>"},{"location":"reference/#options","title":"Options","text":"<ul> <li>CSV Format</li> </ul>"},{"location":"reference/commands/auth/","title":"Authentication","text":"<p>GitHub Organization Tools requires authentication to access the GitHub API.</p>"},{"location":"reference/commands/auth/#personal-access-tokens","title":"Personal Access Tokens","text":"<p>GitHub Organization Tools uses Personal Access Tokens to authenticate with the GitHub API.</p> <p>The scopes required for the token depend on the actions you want to perform.</p>"},{"location":"reference/commands/auth/#required-scopes","title":"Required Scopes","text":"<p>The following scopes are required for the different available commands:</p> <ul> <li>Managing Users:<ul> <li><code>write:org</code> required to invite users to an organization.</li> </ul> </li> <li>Repository Operations:<ul> <li><code>delete_repo</code> required to delete repositories.</li> </ul> </li> </ul>"},{"location":"reference/commands/auth/#storing-the-token","title":"Storing the Token","text":"<p>GitHub Organization Tools can store the token in the system <code>keyring</code> if the user allows it when prompted to do so.</p> <pre><code>Enter your GitHub Personal Access Token: &lt;token&gt;\nSave this token for future use? (y/n): y\n</code></pre>"},{"location":"reference/commands/auth/#checking-authentication","title":"Checking Authentication","text":"<p>You can check if you are authenticated by running the following command:</p> <pre><code>ghot auth check\n</code></pre> <p>If not authenticated, you will be prompted to enter your GitHub Personal Access Token.</p>"},{"location":"reference/commands/auth/#removing-the-token","title":"Removing the Token","text":"<p>You can remove the token from the keyring by running the following command:</p> <pre><code>ghot auth remove\n</code></pre>"},{"location":"reference/commands/auth/#printing-the-token","title":"Printing the Token","text":"<p>You can print the token to the console by running the following command:</p> <pre><code>ghot auth print\n</code></pre>"},{"location":"reference/commands/config/","title":"Configuration","text":"<p>GitHub Organization Tools uses a configuration file system similar to [<code>git-config</code>][git-cinfig] to manage tool settings.</p>"},{"location":"reference/commands/config/#configuration-files","title":"Configuration Files","text":"<p>The tool reads configuration values from two sources, where local values override global ones:</p> <ul> <li><code>~/.ghot</code>: Global configuration file (applies to all invocations).</li> <li><code>.ghot</code>: Local configuration file (applies to invocations in the current directory).</li> </ul>"},{"location":"reference/commands/config/#setting-a-configuration-value","title":"Setting a Configuration Value","text":"<p>To set a configuration key, use the following command:</p> <pre><code>ghot config [set] [--global] &lt;key&gt; &lt;value&gt;\n</code></pre> <ul> <li> <p><code>set</code> (optional): This is the default behaviour and can be omitted. Explicitly indicates you're setting a value.</p> </li> <li> <p><code>--global</code> (optional): Applies the setting to the global configuration file (<code>~/.ghot</code>). If omitted, the setting is written to the local configuration file (<code>.ghot</code>) in the current directory.</p> </li> <li> <p><code>&lt;key&gt;</code>: The configuration key to set.</p> </li> <li> <p><code>&lt;value&gt;</code>: The value to assign to the key</p> </li> </ul>"},{"location":"reference/commands/config/#viewing-a-configuration-value","title":"Viewing a Configuration Value","text":"<p>To retrieve the current value of a configuration key, use the <code>show</code> command:</p> <pre><code>ghot config show [&lt;key&gt;]\n</code></pre> <ul> <li><code>&lt;key&gt;</code> (optional): The configuration key to display. If omitted, all configuration keys are shown.     If the key is defined in both global and local files, the local value is shown.</li> </ul>"},{"location":"reference/commands/config/#list-of-configuration-keys","title":"List of Configuration Keys","text":""},{"location":"reference/commands/config/#csv-options","title":"CSV Options","text":"Config Key CLI Option Default Value Description <code>pattern.id</code> <code>--pattern-id</code> <code>{id}</code> Pattern for <code>id</code> field. <code>pattern.username</code> <code>--pattern-username</code> <code>{username}</code> Pattern for <code>username</code> field. <code>pattern.repo</code> <code>--pattern-repo</code> <code>{repo}</code> Pattern for <code>repo</code> field. <code>pattern.description</code> <code>--pattern-description</code> <code>{description?}</code> Pattern for <code>description</code> field."},{"location":"reference/commands/repositories/","title":"Repository Operations","text":"<p>GitHub Organization Tools supports basic repository operations within an organization. You can clone, pull updates, or delete repositories in bulk.</p>"},{"location":"reference/commands/repositories/#creating-repositories","title":"Creating repositories","text":"<p>To create repositories in a GitHub organization, use the following command:</p> <pre><code>ghot repo create [--dry] [--public] [--private] &lt;org&gt; &lt;csv&gt;\n</code></pre> <ul> <li><code>&lt;org&gt;</code>: The name of the GitHub organization.</li> <li><code>&lt;csv&gt;</code>: Path to a CSV file listing repositories to create.</li> <li><code>--dry</code> (optional): Simulates the creation process without actually creating the repositories. It still checks for the existence of the organization and the repositories.</li> <li><code>--public</code> (optional): Creates the repositories as public. By default, repositories are created as private.</li> <li> <p><code>--private</code> (optional): Creates the repositories as private. This is the default behavior.</p> <p>Note: You can use either <code>--public</code> or <code>--private</code>. If both are specified, <code>--private</code> will take precedence.</p> </li> </ul> <p>This command uses the following fields:</p> <ul> <li><code>repo</code>: The name of the repository to be created.</li> <li><code>description</code>: A description for the repository.</li> </ul> <p>See CSV Format for format and options</p> Usage: Creating Repositories <pre><code>ghot repo create my-org users.csv\n</code></pre>"},{"location":"reference/commands/repositories/#cloning-repositories","title":"Cloning repositories","text":"<p>To clone multiple repositories from an organization:</p> <pre><code>ghot repo clone [-d|--destination &lt;path&gt;] [--ssh] [--dry] &lt;org&gt; &lt;csv&gt;\n</code></pre> <ul> <li><code>&lt;org&gt;</code>: The name of the GitHub organization.</li> <li><code>&lt;csv&gt;</code>: Path to a CSV file listing repositories to clone.</li> <li><code>-d</code>, <code>--destination</code> (optional): Directory where the repositories will be cloned. Defaults to the current directory.</li> <li><code>--dry</code> (optional): Lists the repositories that would be cloned, without performing any actions.</li> <li> <p><code>--ssh</code> (optional): Clones the repositories using SSH instead of HTTPS. This is useful if you have SSH keys set up for authentication.</p> <p>Note: If you use <code>--ssh</code>, ensure that your SSH keys are properly configured in your GitHub account and device.</p> </li> </ul> <p>This command uses the following fields:</p> <ul> <li><code>id</code>: Directory where the repository will be cloned.</li> <li><code>repo</code>: The name of the repository to be cloned.</li> </ul> <p>See CSV Format for format and options</p> Usage: Cloning Repositories <pre><code>ghot repo clone -d org-repos my-org users.csv\n</code></pre>"},{"location":"reference/commands/repositories/#pulling-repositories","title":"Pulling repositories","text":"<p>To pull the latest changes for a list of previously cloned repositories:</p> <pre><code>ghot repo pull [-d|--destination &lt;path&gt;] [--dry] &lt;csv&gt;\n</code></pre> <ul> <li><code>&lt;csv&gt;</code>: Path to a CSV file listing repositories to pull.</li> <li><code>-d|--destination</code> (optional): Directory where the repositories will be cloned. Defaults to the current directory.</li> <li><code>--dry</code> (optional): Lists which repositories would be updated, without making any changes.</li> </ul> <p>This command uses the following fields:</p> <ul> <li><code>id</code>: Directory where the repository exists on the device.</li> </ul> <p>See CSV Format for format and options</p> Usage: Pulling Repositories <pre><code>ghot repo pull -d org-repos my-org users.csv\n</code></pre>"},{"location":"reference/commands/repositories/#deleting-repositories","title":"Deleting repositories","text":"<p>To delete repositories from an organization in GitHub, use the following command:</p> <pre><code>ghot repo delete [--dry] [-f|--force] &lt;org&gt; &lt;csv&gt;\n</code></pre> <ul> <li><code>&lt;org&gt;</code>: The name of the GitHub organization.</li> <li><code>&lt;csv&gt;</code>: Path to a CSV file listing repositories to delete.</li> <li><code>--dry</code> (optional): Shows which repositories would be deleted, without making any changes.</li> <li><code>-f|--force</code> (optional): Skips confirmation and deletes the repositories without prompting.</li> </ul> <p>This command uses the following fields:</p> <ul> <li><code>repo</code>: The name of the repository to be deleted.</li> </ul> <p>See CSV Format for format and options</p> Usage: Deleting Repositories <pre><code>ghot repo delete my-org users.csv\n</code></pre>"},{"location":"reference/commands/repositories/#inviting-users-as-collaborators","title":"Inviting users as collaborators","text":"<p>To invite users to repositories in a GitHub organization, use the following command:</p> <pre><code>ghot repo invite [--dry] &lt;org&gt; &lt;csv&gt;\n</code></pre> <ul> <li><code>&lt;org&gt;</code>: The name of the GitHub organization.</li> <li><code>&lt;csv&gt;</code>: Path to a CSV file listing users and repositories.</li> <li><code>--dry</code> (optional): Simulates the invitation process without actually sending invitations. It still checks for the existence of the organization and the repositories.</li> </ul> <p>This command uses the following fields:</p> <ul> <li><code>username</code>: The GitHub username of the user to be invited.</li> <li><code>repo</code>: The name of the repository to which the user will be invited.</li> </ul> <p>See CSV Format for format and options</p> Usage: Inviting Users to Repositories <pre><code>ghot repo invite my-org users.csv\n</code></pre>"},{"location":"reference/commands/repositories/#creating-issues","title":"Creating issues","text":"<p>To create issues in multiple repositories with the same title and body, use the following command:</p> <pre><code>ghot repo issue [--dry] &lt;org&gt; &lt;csv&gt; &lt;title&gt; &lt;body&gt;\n</code></pre> <ul> <li><code>&lt;org&gt;</code>: The name of the GitHub organization.</li> <li><code>&lt;csv&gt;</code>: Path to a CSV file listing repositories.</li> <li><code>&lt;title&gt;</code>: The title of the issue to be created.</li> <li><code>&lt;body&gt;</code>: The body content of the issue to be created.</li> <li><code>--dry</code> (optional): Simulates the issue creation process     without actually creating the issues.     It still checks for the existence of the organization     and the repositories.</li> </ul> <p>This command uses the following fields:</p> <ul> <li><code>repo</code>: The name of the repository where the issue will be created.</li> </ul> <p>See CSV Format for format and options</p> Usage: Creating Issues <pre><code>ghot issue create my-org users.csv \"Issue Title\" \"Issue Body\"\n</code></pre>"},{"location":"reference/commands/users/","title":"Managing Users","text":"<p>GitHub Organization Tools provides commands to invite or remove users from an organization using a CSV file as input.</p>"},{"location":"reference/commands/users/#inviting-users","title":"Inviting Users","text":"<p>To invite users to a GitHub organization, use the following command:</p> <pre><code>ghot user invite [--dry] &lt;org&gt; &lt;csv&gt;\n</code></pre> <ul> <li><code>&lt;org&gt;</code>: The name of the GitHub organization.</li> <li><code>&lt;csv&gt;</code>: Path to a CSV file containing users.     to be invited.</li> <li><code>--dry</code> (optional): Simulates the invitation process without sending invites. It still checks for the existance of the organization and the users.</li> </ul> <p>This command uses the field <code>username</code> from the CSV file to invite users to the organization.</p> <p>See CSV Format for format and options</p> Usage: Inviting Users <pre><code>ghot user invite my-org users.csv\n</code></pre>"},{"location":"reference/commands/users/#removing-users","title":"Removing Users","text":"<p>To remove users from a GitHub organization, use:</p> <pre><code>ghot user remove [--dry] [--force] &lt;org&gt; &lt;csv&gt;\n</code></pre> <ul> <li><code>&lt;org&gt;</code>: The name of the GitHub organization.</li> <li><code>&lt;csv&gt;</code>: Path to a CSV file listing users to be removed.</li> <li><code>--force</code> (optional): Skips confirmation and deletes users from the organization without prompting.</li> <li><code>--dry</code> (optional): Simulates the removing process without actually removing the users from the organization. It still checks for the existance of the organization and the users.</li> </ul> <p>This command uses the field <code>username</code> from the CSV file to invite users to the organization.</p> <p>See CSV Format for format and options</p> Usage: Removing Users <pre><code>ghot user remove my-org users.csv\n</code></pre>"},{"location":"reference/options/csv/","title":"CSV Format","text":"<p>GitHub Organization Tools uses a CSV file as the primary input for user and repository data. This file contains rows representing users, and the tool maps specific columns to fields such as user ID, GitHub username, and repository URL.</p>"},{"location":"reference/options/csv/#fields","title":"Fields","text":"<p><code>ghot</code> uses different fields depending on the command you are using.</p> Field Description Default pattern <code>id</code> Identifier for the user in <code>ghot</code>. <code>{0}</code> <code>username</code> The GitHub username of the user. <code>{1}</code> <code>repo</code> The repository name whithin the organization. <code>{2}</code> <code>description</code> Description of the repository. <code>\"\"</code> <p>By default, <code>ghot</code> uses the colums first columns to extract the data from the CSV file.</p> <pre><code>id,username,repo\nuser1,user1,user1-repo\nuser2,user2,user2-repo\n</code></pre> <p>This can be configured using Patterns through CLI options or through your Configuration.</p>"},{"location":"reference/options/csv/#patterns","title":"Patterns","text":"<p>You can control how <code>ghot</code> extracts data from the CSV using CLI options or through your Configuration.</p> <p>Patterns support:</p> <ul> <li>Positional placeholders like <code>{f0}</code>, <code>{f1}</code>, etc. (referring to column index)</li> <li>Named placeholders like <code>{username}</code>, <code>{repo}</code> (referring to CSV headers)</li> <li>Default values like <code>{expr?default}</code> (if the expression is empty, use <code>default</code>)</li> <li>Filters like <code>lower()</code> or <code>words()</code> to transform the data.</li> </ul> Example: Default Patterns CSV file<pre><code>id,username,repo\nuser1,user1,user1-repo\nuser2,user2,user2-repo\n</code></pre> Field Pattern Result <code>id</code> <code>{f0}</code> <code>user1</code> <code>username</code> <code>{f1}</code> <code>user1</code> <code>repo</code> <code>{f2}</code> <code>user1-repo</code> <code>description</code> <code>\"\"</code> <code>\"\"</code> CLI optionsConfig <pre><code>ghot user invite \\\n    --pattern-id \"{f0}\" \\\n    --pattern-username \"{f1}\" \\\n    --pattern-repo \"{f2}\" \\\n    --pattern-description \"\" \\\n    my-org users.csv\n</code></pre> <pre><code>ghot config pattern.id \"{f0}\"\nghot config pattern.username \"{f1}\"\nghot config pattern.repo \"{f2}\"\nghot config pattern.description \"\"\nghot user invite my-org users.csv\n</code></pre> Example: Default behaviour with named patterns CSV file<pre><code>id,username,repo\nuser1,user1,user1-repo\nuser2,user2,user2-repo\n</code></pre> Field Pattern Result <code>id</code> <code>{id}</code> <code>user1</code> <code>username</code> <code>{username}</code> <code>user1</code> <code>repo</code> <code>{repo}</code> <code>user1-repo</code> <code>description</code> <code>{description?}</code> <code>\"\"</code> CLI optionsConfig <pre><code>ghot user invite \\\n    --pattern-id \"{id}\" \\\n    --pattern-username \"{username}\" \\\n    --pattern-repo \"{repo}\" \\\n    --pattern-description \"{description?}\" \\\n    my-org users.csv\n</code></pre> <pre><code>ghot config pattern.id \"{id}\"\nghot config pattern.username \"{username}\"\nghot config pattern.repo \"{repo}\"\nghot config pattern.description \"{description?}\"\nghot user invite my-org users.csv\n</code></pre> Example: Create repositories from usernames CSV file<pre><code>id,username,repo\nuser1,user1,user1-repo\nuser2,user2,user2-repo\n</code></pre> Field Pattern Result <code>repo</code> <code>{username}-repo</code> <code>user1-repo</code> <code>description</code> <code>Repository for {username}</code> <code>Repository for user1</code> CLI optionsConfig <pre><code>ghot repo create \\\n    --pattern-repo \"{username}-repo\" \\\n    --pattern-description \"Repository for {username}\" \\\n    my-org users.csv\n</code></pre> <pre><code>ghot config pattern.repo \"{username}-repo\"\nghot config pattern.description \"Repository for {username}\"\nghot repo create my-org users.csv\n</code></pre>"},{"location":"reference/options/csv/#filters","title":"Filters","text":"<p>Filters are used to transform the data extracted from the CSV file.</p> Filter Description <code>lower()</code> Converts the string to lowercase. <code>upper()</code> Converts the string to uppercase. <code>title()</code> Converts the string to title case. <code>strip()</code> Removes leading and trailing whitespace from the string. <code>words(index, delimiter=\" \")</code> Splits the string into words and returns the word at the specified index. The <code>delimiter</code> parameter specifies the character used to split the string (default is a space). <code>replace(old, new)</code> Replaces all occurrences of <code>old</code> with <code>new</code> in the string. <code>remove_accents()</code> Removes accents from characters in the string. Example: Using Filters CSV file<pre><code>id,username,repo\nuser1,user1,user1-repo\nuser2,user2,user2-repo\n</code></pre> Field Pattern Result <code>id</code> <code>{f0.upper()}</code> <code>USER1</code> <code>repo</code> <code>{f2.replace('-', '_')}</code> <code>user1_repo</code> CLI optionsConfig <pre><code>ghot user invite \\\n    --pattern-id \"{f0.upper()}\" \\\n    --pattern-repo \"{f2.replace('-', '_')}\" \\\n    my-org users.csv\n</code></pre> <pre><code>ghot config pattern.id \"{f0.upper()}\"\nghot config pattern.repo \"{f2.replace('-', '_')}\"\nghot user invite my-org users.csv\n</code></pre> Example: More complex filters CSV file<pre><code>name,surname,username\nfizz,buzz bazz,fizzbuzz\n</code></pre> Field Pattern Result <code>id</code> <code>{f0.lower()}.{f1.words(0).lower()}</code> <code>fizz.buzz</code> <code>username</code> <code>{f2}</code> <code>fizzbuzz</code> <code>repo</code> <code>{f1.words(0).title()}{f0.title()}-Repository</code> <code>BuzzFizz-Repository</code> <code>description</code> <code>Repository for {f0.title()} {f1.title()}</code> <code>Repository for Fizz Buzz</code> CLI optionsConfig <pre><code>ghot user invite \\\n    --pattern-id \"{f0.lower()}.{f1.words(0).lower()}\" \\\n    --pattern-username \"{f2}\" \\\n    --pattern-repo \"{f1.words(0).title()}{f0.title()}-Repository\" \\\n    --pattern-description \"Repository for {f0.title()} {f1.title()}\" \\\n    my-org users.csv\n</code></pre> <pre><code>ghot config pattern.id \"{f0.lower()}.{f1.words(0).lower()}\"\nghot config pattern.username \"{f2}\"\nghot config pattern.repo \"{f1.words(0).title()}{f0.title()}-Repository\"\nghot config pattern.description \"Repository for {f0.title()} {f1.title()}\"\nghot user invite my-org users.csv\n</code></pre>"},{"location":"reference/options/csv/#pattern-options","title":"Pattern Options","text":"Config Key CLI Option Default Value Description <code>pattern.id</code> <code>--pattern-id</code> <code>{id}</code> Pattern for <code>id</code> field. <code>pattern.username</code> <code>--pattern-username</code> <code>{username}</code> Pattern for <code>username</code> field. <code>pattern.repo</code> <code>--pattern-repo</code> <code>{repo}</code> Pattern for <code>repo</code> field. <code>pattern.description</code> <code>--pattern-description</code> <code>{description?}</code> Pattern for <code>description</code> field."}]}